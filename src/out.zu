IMPORT.CHEADER <termios.h>
IMPORT.CHEADER <unistd.h>
IMPORT.CHEADER <ctype.h>
IMPORT.CHEADER <errno.h>
IMPORT.CHEADER <sys/ioctl.h>
IMPORT.CHEADER "rawmode.h"
IMPORT "Lua.zu"


# NOTE: ESC -> 0x1b

TYPE int Time_t

string venci_v = "0.0.1"

PROC die(string s)
  LOG.fatal(s)
}

FUNC tcalls(string f, list<string> args = []) string
  string res = "\x1b["
  IF args.Size() >= 1
    int c = 0
    FOR i IN args
      IF c == 0
        res ..= i
      ELSE
        res ..= ";" .. i
      }
      c++
    }
  }
  res ..= f
  RETURN res
}

PROC tcall(string f, list<string> args = [])
  string res = tcalls(f, args)
  IO.stdout.write(res)
}

FUNC getCursorPosition(int &rows, int &cols) status
  IF IO.stdout.write("\x1b[6n") != OK
    RETURN FAIL
  }

  string s = ""
  WHILE TRUE
    byte c = IO.stdin.readByte()
    IF c == IO.eof
      BREAK
    }
    s ..= c.asString()
    IF c == 'R'
      BREAK
    }
  }

  IF s[0] != '\x1b' || s[1] != '['
    RETURN FAIL
  }

  string rw = ""
  string cl = ""
  int i     = 0
  array<nat32> digits = "0123456789".toArray()
  
  FOR c IN s.slice(2)
    int num = digits.find(c)
    IF num != -1
      rw ..= num
    ELSEIF c == ';'
      BREAK
    }
    i++
  }

  FOR c IN s.slice(i + rw.Size())
    int num = digits.find(c)
    IF num != -1
      cl ..= num
    ELSEIF c == 'R'
      BREAK
    }
  }

  rows = rw.toInt()
  cols = cl.toInt()

  RETURN OK
}

FUNC cx2rx(Erow r, nat cx, int ts) int
  int rx = 0
  nat c = 0
  FOR j IN r.txt
    IF c >= cx
      BREAK
    }
    IF j == '\t'
      rx += (ts - 1) - (rx % ts)
    }
    rx++
    c++
  }
  RETURN rx
}

CLASS Erow
  string $txt
  string $orig
  string $render
  int $ts

  PROC $updateRow()
    $render = ""
    FOR i IN $txt
      IF i == '\t'
        FOR j IN 0 TO $ts - 1
          $render ..= ' '.asString()
        }
      ELSE
        $render ..= i.asString()
      }
    }
  }
  
  PROC $insertChar(nat pos, int ch)
    int at = pos
    IF $txt == NIL
      $txt = ""
    }
    IF pos > $txt.Size()
      at = $txt.Size()
    }

    string tmp = ""
    IF at != 0
      tmp = $txt.slice(0, at - 1)
    }
    tmp ..= ch.asString()
    tmp ..= $txt.slice(at + 1)

    $txt = tmp
    THIS.updateRow()
  }

  PROC $shiftl(nat pos)
    $txt = $txt.slice(0, pos) .. " " .. $txt.slice(pos + 1)
    THIS.updateRow()
  }
  
  PROC $preshiftl(nat pos)
    string tmp = ""
    IF pos != 0
      tmp = $txt.slice(0, pos - 1)
    }
    $txt = tmp .. " " .. $txt.slice(pos)
    THIS.updateRow()
  }

  PROC $back()
    $txt = $orig
    THIS.updateRow()
  }

  PROC $delChar(int pos)
    IF pos > 0 || pos < $txt.Size()
      string tmp = ""
      IF pos > 0
        tmp = $txt.slice(0, pos - 1)
      }
      tmp ..= $txt.slice(pos + 1)
      $txt = tmp
    }
    THIS.updateRow()
  }

  FUNC $rx2cx(int rx) int
    int crx = 0
    int cx = 0
    FOR USE cx IN 0 TO $txt.Size()
      IF $txt[cx] == '\t'
        crx += ($ts - 1) - (crx % $ts)
      }
      crx++

      IF crx > rx
        RETURN cx
      }
    }
    RETURN cx
  }
  
  PROC $appendStr(string s)
    $txt ..= s
    THIS.updateRow()
  }

  NEW(string text, int ts)
    $txt = text
    $ts = ts
    $orig = text
    $render = ""
  }
}

CLASS EditorConfig
  nat $cx, $cy
  nat $rx
  int $rows, $cols
  byte $mode
  list<Erow> $erows
  int $n_erows
  int $rowoff
  string $copy
  int $coloff
  int $ts
  bool $expand
  int $fmodified
  string $filename
  string $statusmsg
  Time_t $statime
  C(struct termios*) $orig_termios

  PROC $setStatmsg(string s, string b = "")
    $statusmsg = s .. b
    $statime = TIME.current()
  }

  PROC $find()
    string query = prompt("(=_=) | -ESC to cancel- Find text: ", findCb)
  }
  
  FUNC $rowsToStr() string
    string res = ""
    FOR j IN $erows
      res ..= j.txt .. "\n"
    }
    RETURN res
  }

  PROC $save()
    IF $filename != NIL
      string w = THIS.rowsToStr()

      TRY
        IO.File f = IO.fileWriter($filename, TRUE)
      CATCH E.AccessDenied e
        THIS.setStatmsg("(o.O?) | Error opening file: " .. e.toString(FALSE))
      ELSE
        IF f == NIL
          THIS.setStatmsg("(T.T) | file: \($filename) doesn't exist!")
        ELSE
          f.write(w)
          f.close()
          FOR j IN 0 TO $n_erows - 1
            $erows[j].orig = $erows[j].txt
          }
          THIS.setStatmsg("(\\^w^/) | \(w.Size()) bytes written")
          $fmodified = 0
        }
      }
    ELSE
      $filename = prompt("(o_o)? | Save as: ")
      IF $filename == NIL
        THIS.setStatmsg("(@_@) | so, no saving? Ok that's fine i guess")
      ELSE
        THIS.save()
      }
    }
  }

  PROC $scroll()
    $rx = 0
    IF $cy < $n_erows
      $rx = cx2rx($erows[$cy], $cx, $ts)
    }

    IF $cy < $rowoff
      $rowoff = $cy
    }

    IF $cy >= $rowoff + $rows
      $rowoff = $cy - $rows + 1
    }

    IF $cx < $coloff
      $coloff = $cx
    }

    IF $cx >= $coloff + $cols
      $coloff = $cx - $cols + 1
    }
  }

  PROC $insertRow(string s, int at = $n_erows)
    IF (at >= 0 && at <= $n_erows)
      Erow r = NEW(s, $ts)

      r.updateRow()

      IF at == $n_erows
        $erows.add(r)
      ELSE
        $erows.insert(r, at + 1)
      }
      $n_erows++
      $fmodified++
    }
  }

  PROC $insertNL()
    IF $cx == 0 && $cy == 0 && $n_erows == 0
      THIS.insertRow("", $cy.<int>)
    ELSE
      Erow r = $erows[$cy]
      THIS.insertRow(r.txt.slice($cx), $cy.<int>)
      IF $cx > 0
        r.txt = r.txt.slice(0, $cx - 1)
      ELSE
        r.txt = ""
      }
      r.updateRow()
    }
    $cy++
    $cx = 0
  }
  
  PROC $insertChar(int c)
    IF $cy == $n_erows
      THIS.insertRow("")
      $fmodified--
    }
    $erows[$cy].insertChar($cx, c)
    $cx++
    $fmodified++
  }

  PROC $shiftRowLeft()
    $erows[$cy].shiftl($cx)
  }
  
  PROC $delChar()
    IF $cy != $n_erows
      Erow r = $erows[$cy]
      IF $cx > 0
        r.delChar($cx - 1)
        $cx--
      ELSEIF $cy > 0
        $cx = $erows[$cy - 1].txt.Size()
        $erows[$cy - 1].appendStr(r.txt)

        $erows.clear($cy)
        $n_erows--

        $cy--
      }
    }
  }

  PROC $open(string fname)
    TRY
      IO.File f = IO.fileReader(fname)
    CATCH E.AccessDenied e
      THIS.setStatmsg("(o.O?) | Error opening file: " .. e.toString(FALSE))
    ELSE
      IF f == NIL
        THIS.setStatmsg("(T.T) | file: \(fname) doesn't exist!")
      ELSE
        $filename = fname
        list<string> lines = f.readAllLines()
        FOR line IN lines
          THIS.insertRow(line)
        }
        $fmodified = 0
        f.close()
      }
    }
  }

  PROC $close()
    THIS.reset()
    THIS.setStatmsg("(v.v) | file closed")
  }

  PROC $moveCursor(int k)
    int key

    IF $mode == 'N'
      dict<int, int> mapper = ['h': C(LEFT),
                               'l': C(RIGHT),
                               'j': C(DOWN),
                               'k': C(UP)]
      IF mapper.has(k)
        key = mapper[k]
      ELSE
        key = k
      }
    ELSE
      key = k
    }

    Erow r = ($cy >= $n_erows) ? NIL : $erows[$cy]

    SWITCH key
      CASE C(LEFT)
        IF $cx > 0
          $cx--
        ELSEIF $cy > 0
          $cy--
          IF $cy < $n_erows
            $cx = $erows[$cy].txt.Size()
          }
        }
      CASE C(RIGHT)
        IF r != NIL && $cx < r.txt.Size()
          $cx++
        }
      CASE C(UP)
        IF $cy != 0
          $cy--
        }
      CASE C(DOWN)
        IF $n_erows != 0 && $cy < $n_erows - 1
          $cy++
        }
      CASE '>'
        IF r != NIL
          THIS.shiftRowLeft()
          $fmodified++
        }
      CASE '<'
        IF r != NIL
          r.preshiftl($cx)
          $fmodified++
        }
      CASE 'u'
        IF r != NIL
          IF r.txt != r.orig
            FOR c IN r.txt
              IF r.orig.find(c) == -1
                $fmodified--
              }
            }
            r.back()
            THIS.setStatmsg("(-_O) | undid actions on that line")
          ELSE
            THIS.setStatmsg("(-_-) | nothing to undo on current line.")
          }
        }
      CASE 'D'
        IF r != NIL
          $erows.clear($cy)
          $n_erows--
          $fmodified++
        }
      CASE '['
        IF r != NIL
          $copy = r.txt
          THIS.setStatmsg("(^.^) | line copied")
        }
      CASE ']'
        IF $copy != NIL
          FOR line IN $copy.split("\n")
            THIS.insertRow(line, $cy.<int>)
            $cy++
          }
        }
      CASE '{'
        IF $copy != NIL
          $copy ..= "\n" .. r.txt
          IF $copy.Size() > 250
            THIS.setStatmsg("/(OoO)\\ | sorry, copy buffer is too big.")
            $copy = $copy.slice(0, 250)
          ELSE
            THIS.setStatmsg("('V') | line appended to copy buffer")
          }
        ELSE
          $copy = r.txt
          THIS.setStatmsg("(^.^) | line copied")
        }
      CASE 'J'
        string times = prompt(">>.>> | -ESC to cancel- how many lines to advance: ")
        
        IF times == NIL
          THIS.setStatmsg("(._.) | this is boring, i want to run")
          BREAK
        }
        
        FOR i IN 0 TO times.toInt(20)
          THIS.moveCursor(C(DOWN).<int>)
        }
      CASE 'K'
        string times = prompt("<<.<< | -ESC to cancel- how many lines to go back: ")
        
        IF times == NIL
          THIS.setStatmsg("('-') | this is boring, i want to run")
          BREAK
        }
        
        FOR i IN 0 TO times.toInt(20)
          THIS.moveCursor(C(UP).<int>)
        }
      CASE 'p'
        string t = prompt("(Owo) | \(TIME.current() % 5 == 0 ? "<!--i regret adding this ascii face-->" : "-ESC to cancel-") String to insert: ")
        IF t == NIL
          THIS.setStatmsg("(.o.) | why tho? this command is so cool!")
          BREAK
        }
        FOR i IN 0 TO t.Size() - 1
          r.preshiftl($cx)
        }
        FOR c IN t
          THIS.insertChar(c)
        }
    }

    Erow r2 = ($cy >= $n_erows) ? NIL : $erows[$cy]
    int sz = r2 != NIL ? r2.txt.Size() : 0
    IF $cx > sz
      $cx = sz
    }
  }

  FUNC $getWindowSize() status
>>>
    struct winsize ws;
<<<
    IF C(ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1 || ws.ws_col == 0)
      IF IO.stdout.write("\x1b[999C\x1b[999B") != OK
        RETURN FAIL
      }
      RETURN getCursorPosition(&$rows, &$cols)
    ELSE
      $rows = C(ws.ws_row) - 2
      $cols = C(ws.ws_col)
      RETURN OK
    }
  }

  PROC $reset()
    $rowoff = 0
    $coloff = 0
    $erows = []
    $mode = C('I')
    $ts = 2
    $statusmsg = ""
    $statime = 0
    $n_erows = 0
    $fmodified = 0
    $rx = 0
    $expand = TRUE
    $copy = NIL
    $cx = 0
    $cy = 0
  }

  NEW()
    THIS.reset()
    $rows = 0
    $cols = 0
    $orig_termios = C(malloc(sizeof(struct termios)))
  }
}

EditorConfig ec = NEW()

PROC findCb(string query, int k)
  IF k == '\x1b'
    ec.setStatmsg("('.') | i was trying to find something, but you just canceled the thing.")
    RETURN
  }
  
  FOR i IN 0 TO ec.n_erows - 1
    Erow r = ec.erows[i]
    int match = r.render.find(query)
    
    IF match != -1
      ec.cy = i
      ec.cx = r.rx2cx(match)
      ec.rowoff = ec.n_erows
      ec.setStatmsg("(^O^) | Yay! i found it!")
      BREAK
    ELSEIF i == ec.n_erows - 1
      ec.setStatmsg("(^_-) | didn't find string \(query)")
    }
  }
}

# rawmode.h: void disableRawMode();
>>>
void disableRawMode() {
  if(tcsetattr(STDIN_FILENO, TCSAFLUSH, %ec.orig_termios%) == -1)
    %{die("tcsetattr error")}%;
  free(%ec.orig_termios%);
}
<<<

PROC enableRawMode()
>>>
  struct termios raw;
  atexit(disableRawMode);

  tcgetattr(STDIN_FILENO, %ec.orig_termios%);

  raw = *%ec.orig_termios%;
  raw.c_iflag &= ~(BRKINT | INPCK | ISTRIP | IXON | ICRNL);
  raw.c_oflag &= ~(OPOST);
  raw.c_cflag |= (CS8);
  raw.c_lflag &= ~(ECHO | ICANON | IEXTEN | ISIG);

  raw.c_cc[VMIN] = 0;
  raw.c_cc[VTIME] = 1;
  if(tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw) == -1)
    %{die("tcsetattr error")}%;
<<<
}

PROC clrscr()
  tcall("J", ["2"])
  gotoxy(1, 1)
}

PROC gotoxy(int x, int y)
  tcall("H", [y.ToString(), x.ToString()])
}

FUNC gotoxy_s(int x, int y) string
  RETURN tcalls("H", [y.ToString(), x.ToString()])
}

PROC warnUnsaved()
  ec.setStatmsg("WAIT! (O__O!) | you have unsaved changes, press CTRL-S to save or try again to quit anyway")
}

PROC processKeypress()
  STATIC int didquit = 1
  int c 
>>>
int*c = &%c%;
<<<
  c = readKey()
  IF C(*c == CTRL_KEY('q'))
    IF ec.fmodified > 0 && didquit > 0
      warnUnsaved()
      didquit--
    ELSE
      clrscr()
      EXIT 0
    }
  ELSEIF C(*c == CTRL_KEY('o'))
    string fname = prompt("/>.</ | -ESC to cancel- type a filename: ")
    
    IF fname == NIL
      ec.setStatmsg("@.@ | ok, i get it, no file for me")
      RETURN
    }

    IF ec.fmodified > 0 && didquit > 0
      warnUnsaved()
      didquit--
    ELSE
      ec.reset()
      ec.open(fname)
    }

  ELSEIF C(*c == CTRL_KEY('w'))
    IF ec.fmodified > 0 && didquit > 0
      warnUnsaved()
      didquit--
    ELSE
      ec.close()
    }
  ELSE
    array<nat32> movement = "hjlk+".toArray()
    didquit = 1
    SWITCH c
      CASE '\r'
        ec.insertNL()

      CASE C(CTRL_KEY('f'))
        ec.find()

      CASE C(CTRL_KEY('g'))
        string to = prompt("(o_O) | -ESC to cancel- Goto line: ")
        IF to == NIL
          ec.setStatmsg("(~____~) | nooooo, i want to teleport!")
        }
        int pos = to.toInt(1)
        IF pos <= ec.n_erows
          ec.cy = pos
        ELSE
          ec.setStatmsg("(X-x) | man... you cant go to that line, it's \(pos > ec.n_erows + 40 ? "waayyy" : "like...") outside of the file")
        }

      CASE C(CTRL_KEY('c'))
        ec.setStatmsg("(*_*) | unlike vim, there's actually a NORMAL way to exit, try CTRL-Q")

      CASE C('\x1b')
        ec.mode = ec.mode == 'N' ? 'I' : 'N' 

      CASE C(HOME); ec.cx = 0
      CASE C(END)
        IF (ec.cy < ec.n_erows)
          ec.cx = ec.erows[ec.cy].txt.Size()
        }

      CASE C(BACKSPACE); PROCEED
      CASE C(CTRL_KEY('h')); PROCEED
      CASE C(DEL)
        ec.delChar()

      CASE C(CTRL_KEY('s'))
        ec.save()

      CASE C(PAGE_UP); PROCEED
      CASE C(PAGE_DOWN)
        IF C(*c == PAGE_UP)
          ec.cy = ec.rowoff
        ELSEIF C(*c == PAGE_DOWN)
          ec.cy = ec.rowoff + ec.rows - 1
          IF ec.cy > ec.rows; ec.cy = ec.rows; }
        }
        FOR n IN ec.n_erows TO 0 STEP -1
          int res = C(*c == PAGE_UP ? UP : DOWN)
          ec.moveCursor(res)
        }
      
      CASE C(UP); PROCEED
      CASE C(LEFT); PROCEED
      CASE C(DOWN); PROCEED
      CASE C(RIGHT)
        ec.moveCursor(c)

      CASE '\t'
        IF ec.expand
          FOR i IN 0 TO ec.ts - 1
            ec.insertChar(' ')
          }
        }

      CASE C(CTRL_KEY('l'))
        # this is the void, stuff that isnt 
        # supposed to be handled should
        # PROCEED to here
        BREAK

      DEFAULT
        IF ec.mode == 'N'
          ec.moveCursor(c)
        ELSE
          ec.insertChar(c)
        }
    }
  }
}

FUNC drawRows() string
  string ab = ""
  FOR y IN 0 TO ec.rows - 1
    int n = y + ec.rowoff
    IF n >= ec.n_erows
      IF ec.n_erows == 0 && y == ec.rows / 3
        string w = "Venci test, version " .. venci_v
        int padding = (ec.cols - w.Size()) / 2
        IF padding != 0
          ab ..= "~"
          padding--
        }
        WHILE padding != 0
          ab ..= " "
          padding--
        }
        ab ..= w.slice(0, ec.cols)
      ELSE
        ab ..= "~"
      }
    ELSE
      int sz = ec.erows[n].render.Size() - 1
      int len = sz - ec.coloff
      IF len < 0
        len = 0
      }
      IF len >= ec.cols
        len = ec.cols - 1
      }
      ab ..= ec.erows[n].render.slice(ec.coloff, ec.coloff + len)
    }

    ab ..= "\x1b[K"
    ab ..= "\r\n"
  }
  RETURN ab
}

FUNC drawStatusBar() string
  string ab = ""
  
  string barText = " \(ec.filename == NIL ? "[No Name]" : ec.filename.slice(0, 20))\(ec.fmodified > 0 ? "*" : "") - \(ec.n_erows) lines".slice(0, ec.cols - 1)
  
  string statText = "<\(ec.mode.asString())> LINE:\(ec.cy + 1)/\(ec.n_erows + 1) | COLUM:\(ec.cx + 1)"
  int statlen = statText.Size()

  string welcome = " welcome to venci (^_^)/ |"
  IF barText.Size() + welcome.Size() < ec.cols - statlen
    barText = welcome .. barText
  }

  ab ..= tcalls("m", ["7"])

  ab ..= barText

  FOR n IN barText.Size() TO ec.cols - 1
    IF ec.cols - n == statlen
      ab ..= statText
      BREAK
    }
    ab ..= " "
  }
  ab ..= tcalls("m")
  ab ..= "\r\n"
  RETURN ab
}

FUNC drawMsgBar() string
  string ab = ""
  ab ..= tcalls("K")
  int msglen = ec.statusmsg.Size()
  IF msglen > 0 && TIME.current() - ec.statime < 5000
    ab ..= ec.statusmsg
  }
  RETURN ab
}

PROC refreshScreen()
  ec.getWindowSize()
  
  ec.scroll()

  string ab = ""

  ab ..= tcalls("l", ["?25"])
  ab ..= gotoxy_s(1, 1)
  
  ab ..= drawRows()
  ab ..= drawStatusBar()
  ab ..= drawMsgBar()
  
  ab ..= gotoxy_s((ec.rx - ec.coloff) + 1, (ec.cy - ec.rowoff) + 1)
  ab ..= tcalls("h", ["?25"])

>>> uses(getCstring)
  write(STDOUT_FILENO, ZgetCstring(%ab%), %ab.Size()%);
<<<
}

FUNC prompt(string msg, proc<string, int> fn = NIL) string
  string buf = ""
  WHILE TRUE
    ec.setStatmsg(msg, buf)
    refreshScreen()

    int c 
>>>
int*c = &%c%;
<<<
    c = readKey()

    IF C(*c == DEL || *c == CTRL_KEY('h') || *c == BACKSPACE)
      IF buf.Size() > 1
        buf = buf.slice(0, buf.Size() - 2)
      ELSE
        buf = ""
      }
    }

    IF C(*c == '\x1b')
      ec.setStatmsg("")
      IF fn != NIL
        fn(buf, c)
      }
      RETURN NIL
    }

    IF C(*c == '\r')
      IF buf.Size() > 0
        ec.setStatmsg("")
        IF fn != NIL
          fn(buf, c)
        }
        BREAK
      }
    ELSEIF C(!iscntrl(*c) && *c < 128)
      buf ..= c.asString()
    }

    IF fn != NIL
      fn(buf, c)
    }
  }
  RETURN buf
}

FUNC readKey() int
  int nread 
>>>
int*nread = &%nread%;
<<<
  byte c    
>>>
char*c = &%c%;
<<<
  int res   
>>>
int*res = &%res%;
<<<
  WHILE C((*nread = read(STDIN_FILENO, c, 1)) != 1)
    IF C(*nread == -1 && errno != EAGAIN)
      die("read error")
    }
  }

  IF C(*c == '\x1b')
>>>
    char seq[3];
<<<
    IF C(read(STDIN_FILENO, &seq[0], 1) != 1)
      RETURN C('\x1b') # need to use C('\x1b')
                       # because zimbu char literals
                       # are kinda broken
    }
    IF C(read(STDIN_FILENO, &seq[1], 1) != 1)
      RETURN C('\x1b')
    }

    IF C(seq[0] == '[')
      IF C(seq[1] >= '0' && seq[1] <= '9')
        IF C(read(STDIN_FILENO, &seq[2], 1) != 1)
          RETURN C('\x1b')
        }
        IF C(seq[2] == '~')
          byte seq1 = C(seq[1])
          SWITCH seq1.<int>
            CASE C('1'); RETURN C(HOME)
            CASE C('3'); RETURN C(DEL)
            CASE C('4'); RETURN C(END)
            CASE C('5'); RETURN C(PAGE_UP)
            CASE C('6'); RETURN C(PAGE_DOWN)
            CASE C('7'); RETURN C(HOME)
            CASE C('8'); RETURN C(END)
          }
        }
      ELSE
        byte seq1 = C(seq[1])
        SWITCH seq1.<int>
          CASE 'A'; RETURN C(UP)
          CASE 'B'; RETURN C(DOWN)
          CASE 'C'; RETURN C(RIGHT)
          CASE 'D'; RETURN C(LEFT)
          CASE 'H'; RETURN C(HOME)
          CASE 'F'; RETURN C(END)
        }
      }
    ELSEIF C(seq[0] == 'O')
      byte seq1 = C(seq[1])
      SWITCH seq1.<int>
        CASE 'H'; RETURN C(HOME)
        CASE 'F'; RETURN C(END)
      }
    }

    RETURN C('\x1b')
  ELSE
    RETURN c
  }
}

FUNC Main() int
  enableRawMode()
  IF ec.getWindowSize() != OK
    die("error getting window size")
  }

  ec.setStatmsg("info: press Ctrl-Q to quit venci, press Ctrl-S to save")

  IF ARG.rawSize() > 0
    ec.open(ARG.getRawList()[0])
  }

  WHILE TRUE
    refreshScreen()
    processKeypress()
  }
 
  RETURN 0
}
